---
# Source: next/templates/nginx-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: staging-web-nginx
data:
  conf: |
    server {
      listen 80 default_server;
      listen [::]:80 default_server;
    
      server_name _;
    
      location / {
        # default port, could be changed if you use next with custom server
        proxy_pass http://localhost:3000;
    
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_cache_bypass $http_upgrade;
    
        # if you have try_files like this, remove it from our block
        # otherwise next app will not work properly
        # try_files $uri $uri/ =404;
        location ~* \.(map) {
          return 404;
        }
      }
    }
    

---
# Source: next/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: staging-web
spec:
  type: ClusterIP
  ports:
    - port: 80
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app: staging-web

---
# Source: next/templates/tests/test-connection.yaml
apiVersion: v1
kind: Pod
metadata:
  name: "staging-web-test-connection"
  annotations:
    "helm.sh/hook": test-success
spec:
  containers:
    - name: wget
      image: busybox
      command: ['wget']
      args:  ['staging-web:80']
  restartPolicy: Never

---
# Source: next/templates/deploymentBlue.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: staging-web-blue
  labels:
    app: staging-web
    colour: blue
spec:
  replicas: 2
  strategy:
    type: RollingUpdate
    rollingUpdate:
       maxUnavailable: 25%
       maxSurge: 1
  selector:
    matchLabels:
      app: staging-web
      colour: blue
  template:
    metadata:
      annotations:
        ad.datadoghq.com/frontend.logs: '[{"source":"staging-web","service":"frontend"}]'
      labels:
        app: staging-web
        colour: blue
    spec:
      imagePullSecrets:
        - name: dockerhub
        
      containers:
        - name: staging-web
          image: "mryum/mryum.com:latest"
          imagePullPolicy: IfNotPresent
          env:
            - name: APP_ENV
              value: staging
            
          ports:
            - name: http
              containerPort: 3000
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /health
              port: http
          readinessProbe:
            httpGet:
              path: /health
              port: http
          resources:
            limits:
              cpu: 300m
              memory: 600Mi
            requests:
              cpu: 200m
              memory: 400Mi
            
        - image: "nginx:alpine"
          imagePullPolicy: IfNotPresent
          name: nginx
          ports:
            - containerPort: 80
          resources:
            limits:
              cpu: 200m
              memory: 200Mi
            requests:
              cpu: 100m
              memory: 100Mi
            
          volumeMounts:
          - mountPath: /etc/nginx/conf.d
            name: conf
      volumes:
      - name: conf
        configMap:
          name: staging-web-nginx

---
# Source: next/templates/deploymentGreen.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: staging-web-green
  labels:
    app: staging-web
    colour: green
spec:
  replicas: 2
  strategy:
    type: RollingUpdate
    rollingUpdate:
       maxUnavailable: 25%
       maxSurge: 1
  selector:
    matchLabels:
      app: staging-web
      colour: green
  template:
    metadata:
      annotations:
        ad.datadoghq.com/frontend.logs: '[{"source":"staging-web","service":"frontend"}]'
      labels:
        app: staging-web
        colour: green
    spec:
      imagePullSecrets:
        - name: dockerhub
        
      containers:
        - name: staging-web
          image: "mryum/mryum.com:latest"
          imagePullPolicy: IfNotPresent
          env:
            - name: APP_ENV
              value: staging
            
          ports:
            - name: http
              containerPort: 3000
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /health
              port: http
          readinessProbe:
            httpGet:
              path: /health
              port: http
          resources:
            limits:
              cpu: 300m
              memory: 600Mi
            requests:
              cpu: 200m
              memory: 400Mi
            
        - image: "nginx:alpine"
          imagePullPolicy: IfNotPresent
          name: nginx
          ports:
            - containerPort: 80
          resources:
            limits:
              cpu: 200m
              memory: 200Mi
            requests:
              cpu: 100m
              memory: 100Mi
            
          volumeMounts:
          - mountPath: /etc/nginx/conf.d
            name: conf
      volumes:
      - name: conf
        configMap:
          name: staging-web-nginx

---
# Source: next/templates/destinationRule.yaml

apiVersion: networking.istio.io/v1alpha3
kind: DestinationRule
metadata:
  name: staging-web
  namespace: staging
spec:
  host: staging-web.staging.svc.cluster.local
  trafficPolicy:
    loadBalancer:
      simple: LEAST_CONN
  subsets:
  - name: green
    labels:
      colour: green
  - name: blue
    labels:
      colour: blue

---
# Source: next/templates/gateway.yaml

apiVersion: networking.istio.io/v1alpha3
kind: Gateway
metadata:
  name: staging-web
  namespace: staging
spec:
  selector:
    istio: ingressgateway
  servers:
  - port:
      number: 80
      name: http
      protocol: HTTP
    hosts:
      - "staging.mryum.com"
      - "staging.avcmenu.com"
  #   tls:
  #     httpsRedirect: true
  # - port:
  #     number: 443
  #     name: https-staging-web-
  #     protocol: HTTPS
  #   hosts:
  #
  #   tls:
  #     mode: SIMPLE
  #     serverCertificate: /etc/istio/-certs/tls.crt
  #     privateKey: /etc/istio/-certs/tls.key

---
# Source: next/templates/virtualservice.yaml

apiVersion: networking.istio.io/v1alpha3
kind: VirtualService
metadata:
  name: staging-web-staging.mryum.com
  namespace: staging
spec:
  hosts:
  - staging.mryum.com
  gateways:
  - staging-web
  http:
  - name: staging-web-route
    match:
    - uri:
        prefix: "/"
    route:
    - destination:
        host: staging-web.staging.svc.cluster.local
        subset: green
        port:
          number: 80
      weight: 0
    - destination:
        host: staging-web.staging.svc.cluster.local
        subset: blue
        port:
          number: 80
      weight: 100

---
apiVersion: networking.istio.io/v1alpha3
kind: VirtualService
metadata:
  name: staging-web-staging.avcmenu.com
  namespace: staging
spec:
  hosts:
  - staging.avcmenu.com
  gateways:
  - staging-web
  http:
  - name: staging-web-route
    match:
    - uri:
        prefix: "/"
    route:
    - destination:
        host: staging-web.staging.svc.cluster.local
        subset: green
        port:
          number: 80
      weight: 0
    - destination:
        host: staging-web.staging.svc.cluster.local
        subset: blue
        port:
          number: 80
      weight: 100

---

